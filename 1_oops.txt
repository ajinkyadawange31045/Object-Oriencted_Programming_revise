OOPs ->
1. Object
2. Class
3. polymorhism
4. Encapsulation
5. Inheritance
6. Abstraction


1. Object 
    object class ka hi hota hai,object and variable are almost same.
    a = [1,2,3]
    object is a instance of class

2. Class
    Class is a blueprint
    blueprint of how the object will behave

    class has either data, or desciption
    camelCase -> Camel (first letter capital)
    snake case -> ajinkya_dawange (iunderscore lagta hai)
    - syntax:
    class Car: #class name should be in Pascal case (ThisISPascalCase)
    > + (public hai toh plus se represent hota hai, - private represent with minus)
    class -> object
    car  -----> Innova
    sports ---> Cricket

    object literals, available for built in classes

    methods are the functions which are inside a class
        l = []
        len(l) #it's a function,
        l.append(1)  #this is method, or function inside list class
    
    Contructor is the speacial method whose code is created when the object is created inside.

        -> python mai constructor ka naam __init__ hi hona chaiye
        -> 

Magic Methods -> __methods__ (age aur piche underscore hoga)
    magic methods mai,object call nahi karega.
    they will be called on their own, for a given condition.

    constructor is one of the magic method
    use of constructor 
        -> ek aaisa method, jiska control user ke paas nahi hai.
        >eg. connecting with GPS, Internet, etc (in background we do this codes)

        God is programmer, and world is class. human is object
        -> contructor ke ander woh cheeze hai jo mere control mai nahihai, -> death
    
Self -> print(id(self)) 
    kyuki self is considered as object in python. so we can have address of the self.
     -->->-> id(sbi)
    -> sbi hi self hai

    jo object ke sath hum currently kaam kar rhe hai, wohi self hota hai.
        input mai self kyu mil rha hai?
            class ke methods ko sirf uss class ko object access kar sakta hai...

            one methods of the same class cannot acesss the other methods of the same class.
                but to access the other methods, we can do that using self. 
            
Create our own datatype.
eg - create data type where you can access data in python\
    3rd file



Instance variable -> aaise variable jinka value har object keliey alag hota hai

Encapsulation ->
    python mai price function nahi hota.
    so we put double underscore, in init
    def __init__(self):
        self.__pin = ""
        self.__balance = 20
    
    we can even hide function,
    def __function(self):
     
    what happens internerlly
    when we add __pin, then python does the className to _className
        so pin will look like, _className__pin
    
    Nothing in python is truly private.
        this desision was taken, because in python they do not wanted to 
Encapsulation -> to prevent data from modifying accidently


the following is a class diagram.
Class  (ATM)
    Attribute (__pin,__balence)
        methods (__init__,menu,changepin,withdraw)
    

Reference Variable ->
    a = Atm()
    object Atm() hai, and a mai usko refer kiya gya hai.
    so a is called as reference variable

Pass by Reference -> 

    





    

